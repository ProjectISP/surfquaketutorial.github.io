{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to surfQuake surfQuake is an amenable toolbox that joins functionality and standard algorithms commonly used in seismology. The complete software is separated in several modules and each module is designed to overcome a specific task.","title":"Home"},{"location":"#welcome-to-surfquake","text":"surfQuake is an amenable toolbox that joins functionality and standard algorithms commonly used in seismology. The complete software is separated in several modules and each module is designed to overcome a specific task.","title":"Welcome to surfQuake"},{"location":"picker/","text":"The Picking algorythm of surfQuake uses the Deep Neural Network of Phasenet ( Liu et al., 2019 ) to estimate the arrival times of P- and S-wave. Library Classes PhasenetISP class PhasenetISP : def __init__ ( files , batch_size = 3 , highpass_filter = 0.5 , min_p_prob = 0.3 , min_s_prob = 0.3 , min_peak_distance = 50 , amplitude = False ): \"\"\" Main class to initialize the picker :param files: Dictionary with kewords addressing to seismograms file path and their corresponding metadata (i.e. sampling rate). :type SurfProject: required (see Project section) :param batch_size: Determines the number of samples in each batch (larger batch size uses more memory but can provide more accurate updates) :type float: :param highpass_filter: Lower corner frequency of highpass filter to be applied to the raw seismogram. Set to 0 to do not apply any pre-filter :type float: :param min_p_prob: Probability threshold for P pick :type float: :param min_s_prob: Probability threshold for S pick :type float: :param min_peak_distance: Minimum peak distance :type float: :param amplitude: if return amplitude value :type float: :returns: :rtype: :class:`surfquakecore.phasenet.phasenet_handler.PhasenetISP` \"\"\" PhasenetUtils Methods phasenet # instance method def phasenet ( self ): PhasenetUtils.split_picks @staticmethod def split_picks ( picks ): \"\"\" :param picks: A DataFrame with all pick information :type picks: Pandas DataFrame \"\"\" PhasenetUtils.convert2real @staticmethod def convert2real ( picks , pick_dir : str ): \"\"\" :param picks: picks is output from method split_picks in mseedutils :param pick_dir: directory outpur where phases are storaged :return: \"\"\" PhasenetUtils.split_picks @staticmethod def save_original_picks ( original_picks , original_p_dir ): \"\"\" :param original_picks: picking output from phasenet (method split_picks in mseedutils) :param original_p_dir: output to storage original_picks :return: \"\"\" CL Interface Usage surfquake pick - f [ path to your project file ] - d [ path to your pick saving directory ] - p [ P - wave threshoold ] - s [ S - wave threshold ] -- verbose \" GUI","title":"Phase Picker"},{"location":"picker/#library","text":"","title":"Library"},{"location":"picker/#classes","text":"PhasenetISP class PhasenetISP : def __init__ ( files , batch_size = 3 , highpass_filter = 0.5 , min_p_prob = 0.3 , min_s_prob = 0.3 , min_peak_distance = 50 , amplitude = False ): \"\"\" Main class to initialize the picker :param files: Dictionary with kewords addressing to seismograms file path and their corresponding metadata (i.e. sampling rate). :type SurfProject: required (see Project section) :param batch_size: Determines the number of samples in each batch (larger batch size uses more memory but can provide more accurate updates) :type float: :param highpass_filter: Lower corner frequency of highpass filter to be applied to the raw seismogram. Set to 0 to do not apply any pre-filter :type float: :param min_p_prob: Probability threshold for P pick :type float: :param min_s_prob: Probability threshold for S pick :type float: :param min_peak_distance: Minimum peak distance :type float: :param amplitude: if return amplitude value :type float: :returns: :rtype: :class:`surfquakecore.phasenet.phasenet_handler.PhasenetISP` \"\"\" PhasenetUtils","title":"Classes"},{"location":"picker/#methods","text":"phasenet # instance method def phasenet ( self ): PhasenetUtils.split_picks @staticmethod def split_picks ( picks ): \"\"\" :param picks: A DataFrame with all pick information :type picks: Pandas DataFrame \"\"\" PhasenetUtils.convert2real @staticmethod def convert2real ( picks , pick_dir : str ): \"\"\" :param picks: picks is output from method split_picks in mseedutils :param pick_dir: directory outpur where phases are storaged :return: \"\"\" PhasenetUtils.split_picks @staticmethod def save_original_picks ( original_picks , original_p_dir ): \"\"\" :param original_picks: picking output from phasenet (method split_picks in mseedutils) :param original_p_dir: output to storage original_picks :return: \"\"\"","title":"Methods"},{"location":"picker/#cl-interface","text":"","title":"CL Interface"},{"location":"picker/#usage","text":"surfquake pick - f [ path to your project file ] - d [ path to your pick saving directory ] - p [ P - wave threshoold ] - s [ S - wave threshold ] -- verbose \"","title":"Usage"},{"location":"picker/#gui","text":"","title":"GUI"},{"location":"project/","text":"Library surfQuake is an amenable toolbox that joins functionality and standard algorithms commonly used in seismology. The complete software is separated in several modules and each module is designed to overcome a specific task. CL Interface","title":"Project"},{"location":"project/#library","text":"surfQuake is an amenable toolbox that joins functionality and standard algorithms commonly used in seismology. The complete software is separated in several modules and each module is designed to overcome a specific task.","title":"Library"},{"location":"project/#cl-interface","text":"","title":"CL Interface"},{"location":"template/","text":"MyClass A brief introduction to what MyClass does. Attributes attribute1 : Description of attribute1. attribute2 : Description of attribute2. Methods __init__(self, param1, param2) Description of the constructor method. Parameters param1 : Description of param1. param2 : Description of param2. method1(self, arg1) Description of method1. Parameters arg1 : Description of arg1. Returns Description of what the method returns. method2(self, arg2) Description of method2. Parameters arg2 : Description of arg2. Returns Description of what the method returns. read(pathname_or_url=None, format=None, ...) class method ( self , pathname_or_url = None , ** kwargs ): \"\"\" A method to pick seismic data. :param pathname_or_url: The path or URL of the seismic data. :type pathname_or_url: str, optional :param **kwargs: Additional keyword arguments. :returns: The seismic data. :rtype: :class:`~obspy.core.stream.Stream` \"\"\" # Implementation of the picker method pass","title":"MyClass"},{"location":"template/#myclass","text":"A brief introduction to what MyClass does.","title":"MyClass"},{"location":"template/#attributes","text":"attribute1 : Description of attribute1. attribute2 : Description of attribute2.","title":"Attributes"},{"location":"template/#methods","text":"","title":"Methods"},{"location":"template/#__init__self-param1-param2","text":"Description of the constructor method.","title":"__init__(self, param1, param2)"},{"location":"template/#parameters","text":"param1 : Description of param1. param2 : Description of param2.","title":"Parameters"},{"location":"template/#method1self-arg1","text":"Description of method1.","title":"method1(self, arg1)"},{"location":"template/#parameters_1","text":"arg1 : Description of arg1.","title":"Parameters"},{"location":"template/#returns","text":"Description of what the method returns.","title":"Returns"},{"location":"template/#method2self-arg2","text":"Description of method2.","title":"method2(self, arg2)"},{"location":"template/#parameters_2","text":"arg2 : Description of arg2.","title":"Parameters"},{"location":"template/#returns_1","text":"Description of what the method returns. read(pathname_or_url=None, format=None, ...) class method ( self , pathname_or_url = None , ** kwargs ): \"\"\" A method to pick seismic data. :param pathname_or_url: The path or URL of the seismic data. :type pathname_or_url: str, optional :param **kwargs: Additional keyword arguments. :returns: The seismic data. :rtype: :class:`~obspy.core.stream.Stream` \"\"\" # Implementation of the picker method pass","title":"Returns"}]}