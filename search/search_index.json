{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to surfQuake surfQuake is an amenable toolbox that joins functionality and standard algorithms commonly used in seismology. The complete software is separated in several modules and each module is designed to overcome a specific task.","title":"Home"},{"location":"#welcome-to-surfquake","text":"surfQuake is an amenable toolbox that joins functionality and standard algorithms commonly used in seismology. The complete software is separated in several modules and each module is designed to overcome a specific task.","title":"Welcome to surfQuake"},{"location":"picker/","text":"The Picking algorythm of surfQuake uses the Deep Neural Network of Phasenet ( Liu et al., 2019 ) to estimate the arrival times of P- and S-wave. The arrival times are saved as a csv file and in daily folders to be ready to be used by the associator. Example of csv header: date,fname,year,month,day,net,station,flag,tt,date_time,weight,amplitude,phase 20220131,CA.ARBS.P,2022,1,31,CA,ARBS,1,39383.88,2022-01-31T10:56:23.880000,0.5383206605911255,8557892.700195312,P 20220131,CA.ARBS.S,2022,1,31,CA,ARBS,1,85480.59,2022-01-31T23:44:40.590000,0.30124416947364807,8481788.269042969,S Phase Picker GUI We start with the GUI. This is a screenshot of the Project GUI. Be sure you have just created a Project or you have loaded one. Then click on Run Auto Pick . This action will start the phase picker and will save the output in surfquake/data/picks ready to be used in the associator toolbox and surfquake/data/original_picks as csv file for direct reading. Phase Picker from Library Classes PhasenetISP class PhasenetISP : def __init__ ( files , batch_size = 3 , highpass_filter = 0.5 , min_p_prob = 0.3 , min_s_prob = 0.3 , min_peak_distance = 50 , amplitude = False ): \"\"\" Main class to initialize the picker :param files: Dictionary with kewords addressing to seismograms file path and their corresponding metadata (i.e. sampling rate). :type SurfProject: required (see Project section) :param batch_size: Determines the number of samples in each batch (larger batch size uses more memory but can provide more accurate updates) :type float: :param highpass_filter: Lower corner frequency of highpass filter to be applied to the raw seismogram. Set to 0 to do not apply any pre-filter :type float: :param min_p_prob: Probability threshold for P pick :type float: :param min_s_prob: Probability threshold for S pick :type float: :param min_peak_distance: Minimum peak distance :type float: :param amplitude: if return amplitude value :type float: :returns: :rtype: :class:`surfquakecore.phasenet.phasenet_handler.PhasenetISP` \"\"\" PhasenetUtils Methods phasenet # instance method def phasenet ( self ): PhasenetUtils.split_picks @staticmethod def split_picks ( picks ): \"\"\" :param picks: A DataFrame with all pick information :type picks: Pandas DataFrame \"\"\" PhasenetUtils.convert2real @staticmethod def convert2real ( picks , pick_dir : str ): \"\"\" :param picks: picks is output from method split_picks in mseedutils :param pick_dir: directory outpur where phases are storaged :return: \"\"\" PhasenetUtils.split_picks @staticmethod def save_original_picks ( original_picks , original_p_dir ): \"\"\" :param original_picks: picking output from phasenet (method split_picks in mseedutils) :param original_p_dir: output to storage original_picks :return: \"\"\" example using library import os from multiprocessing import freeze_support from surfquakecore.phasenet.phasenet_handler import PhasenetUtils from surfquakecore.phasenet.phasenet_handler import PhasenetISP from surfquakecore.project.surf_project import SurfProject ### Set Paths to project file and output folder ### path_to_project = \"/Volumes/LaCie/test_surfquake_core/project/surfquake_project.pkl\" output_picks = '/Volumes/LaCie/test_surfquake_core/test_picking' if __name__ == '__main__' : freeze_support () # Load project sp_loaded = SurfProject . load_project ( path_to_project_file = path_to_project ) # Instantiate the class PhasenetISP phISP = PhasenetISP ( sp_loaded . project , amplitude = True , min_p_prob = 0.90 , min_s_prob = 0.65 ) # Running Stage picks = phISP . phasenet () \"\"\" PHASENET OUTPUT TO REAL INPUT \"\"\" picks_results = PhasenetUtils . split_picks ( picks ) PhasenetUtils . convert2real ( picks_results , output_picks ) PhasenetUtils . save_original_picks ( picks_results , output_picks ) Phase picker from CLI Overview The Picking algorythm uses the Deep Neural Network of Phasenet to estimate the arrival times of P- and S-wave Usage >> surfquake pick -f [ path to your project file ] -d [ path to your pick saving directory ] -p [ P-wave threshoold ] -s [ S-wave threshold ] --verbose \" Interactive help >> surfquake pick -h Run Phase Picker from CLI >> surfquake pick -f /Volumes/LaCie/test_surfquake_core/testing_data/projectssurfquake_project_new.pkl -d /Volumes/LaCie/test_surfquake_core/testing_data/picks -p 0 .3 -s 0 .3 --verbose","title":"Phase Picker"},{"location":"picker/#phase-picker-gui","text":"We start with the GUI. This is a screenshot of the Project GUI. Be sure you have just created a Project or you have loaded one. Then click on Run Auto Pick . This action will start the phase picker and will save the output in surfquake/data/picks ready to be used in the associator toolbox and surfquake/data/original_picks as csv file for direct reading.","title":"Phase Picker GUI"},{"location":"picker/#phase-picker-from-library","text":"","title":"Phase Picker from Library"},{"location":"picker/#classes","text":"PhasenetISP class PhasenetISP : def __init__ ( files , batch_size = 3 , highpass_filter = 0.5 , min_p_prob = 0.3 , min_s_prob = 0.3 , min_peak_distance = 50 , amplitude = False ): \"\"\" Main class to initialize the picker :param files: Dictionary with kewords addressing to seismograms file path and their corresponding metadata (i.e. sampling rate). :type SurfProject: required (see Project section) :param batch_size: Determines the number of samples in each batch (larger batch size uses more memory but can provide more accurate updates) :type float: :param highpass_filter: Lower corner frequency of highpass filter to be applied to the raw seismogram. Set to 0 to do not apply any pre-filter :type float: :param min_p_prob: Probability threshold for P pick :type float: :param min_s_prob: Probability threshold for S pick :type float: :param min_peak_distance: Minimum peak distance :type float: :param amplitude: if return amplitude value :type float: :returns: :rtype: :class:`surfquakecore.phasenet.phasenet_handler.PhasenetISP` \"\"\" PhasenetUtils","title":"Classes"},{"location":"picker/#methods","text":"phasenet # instance method def phasenet ( self ): PhasenetUtils.split_picks @staticmethod def split_picks ( picks ): \"\"\" :param picks: A DataFrame with all pick information :type picks: Pandas DataFrame \"\"\" PhasenetUtils.convert2real @staticmethod def convert2real ( picks , pick_dir : str ): \"\"\" :param picks: picks is output from method split_picks in mseedutils :param pick_dir: directory outpur where phases are storaged :return: \"\"\" PhasenetUtils.split_picks @staticmethod def save_original_picks ( original_picks , original_p_dir ): \"\"\" :param original_picks: picking output from phasenet (method split_picks in mseedutils) :param original_p_dir: output to storage original_picks :return: \"\"\"","title":"Methods"},{"location":"picker/#example-using-library","text":"import os from multiprocessing import freeze_support from surfquakecore.phasenet.phasenet_handler import PhasenetUtils from surfquakecore.phasenet.phasenet_handler import PhasenetISP from surfquakecore.project.surf_project import SurfProject ### Set Paths to project file and output folder ### path_to_project = \"/Volumes/LaCie/test_surfquake_core/project/surfquake_project.pkl\" output_picks = '/Volumes/LaCie/test_surfquake_core/test_picking' if __name__ == '__main__' : freeze_support () # Load project sp_loaded = SurfProject . load_project ( path_to_project_file = path_to_project ) # Instantiate the class PhasenetISP phISP = PhasenetISP ( sp_loaded . project , amplitude = True , min_p_prob = 0.90 , min_s_prob = 0.65 ) # Running Stage picks = phISP . phasenet () \"\"\" PHASENET OUTPUT TO REAL INPUT \"\"\" picks_results = PhasenetUtils . split_picks ( picks ) PhasenetUtils . convert2real ( picks_results , output_picks ) PhasenetUtils . save_original_picks ( picks_results , output_picks )","title":"example using library"},{"location":"picker/#phase-picker-from-cli","text":"","title":"Phase picker from CLI"},{"location":"picker/#overview","text":"The Picking algorythm uses the Deep Neural Network of Phasenet to estimate the arrival times of P- and S-wave","title":"Overview"},{"location":"picker/#usage","text":">> surfquake pick -f [ path to your project file ] -d [ path to your pick saving directory ] -p [ P-wave threshoold ] -s [ S-wave threshold ] --verbose \"","title":"Usage"},{"location":"picker/#interactive-help","text":">> surfquake pick -h","title":"Interactive help"},{"location":"picker/#run-phase-picker-from-cli","text":">> surfquake pick -f /Volumes/LaCie/test_surfquake_core/testing_data/projectssurfquake_project_new.pkl -d /Volumes/LaCie/test_surfquake_core/testing_data/picks -p 0 .3 -s 0 .3 --verbose","title":"Run Phase Picker from CLI"},{"location":"project/","text":"Create your project In surfQuake a project is simply a python object that can store in its attributes the path to valid seismogram files plus the associated metadata. This strategy allows to proceed with fast filters or join different projects. Project is the necessary input for the toolboxes Picker, Associator, Event Locator, Seismic Source and MTI. Here we will explain how the user can manage a project and be ready to proceed with the rest of toolboxes. Project GUI We start with the GUI. This is a screenshot of the Project GUI. First, you need to choose between: Search files using Regular Expressions : Click in this button will open a window explorer to select the available files based on the filter edit line. In the example ( .HHZ) and ( EMUR*). Please set to blank space if you do not desire apply filters inside the window explorer. Then just select files and accept. The project will be automatically generated. Project Parth Files : This option is intendeed to let surfQuake search for valid seismogram files from a root folder in ahead. Optionally check Filter Time Spam and/or Filter Keys to include seismograms files that only fullfills the filter. Second: Save Project It is very remmendable to save the project. So, Proceed to give a name to the project and save it pressing Save Project for later using. Third: Load Project This action will open a window explorer so that you can select a project file previously saved and loaded. This will let you go ahead with the following toolboxes such as Picking Phases. Finally: Metadata (https://docs.obspy.org/tutorial/code_snippets/stationxml_file_from_scratch.html): Metadata file with the in there is information structured as a dictionary nets/stations/channels. Personally, the best way to make your own metadata file is using either the java software PDCC or going to the API Station Management Portal . Project from library Classes In this section, we will explain the class SurfProject and we will explain how to manage your project from a simple example: SurfProject class SurfProject : def __init__ ( self , root_path : Union [ str , List [ str ]]): \"\"\" SurfProject class is designed to be able to storage the path to seismograms files plus the file metadata information (i.e. sampling_rate, starttime...) Attributes: - root_path (str): The root path to the folder where the user have the data files. Methods: - __init__(root_path): Initialize a new instance of MyClass. - load_project(path_to_project_file: str): Load a project from a file storage in hard-drive - save_project(path_file_to_storage: str): Saves a project as a pickle file in hard-drive - search_files(verbose=True, **kwargs): Create a project. It can be used filters by nets, stations, channels selection and/or filter by timestamp - filter_project_keys(**kwargs): Filter a project (once is crated) using regular expressions. \"\"\" Methods search_files def search_files ( self , format = \"NONE\" , verbose = True , ** kwargs ): \"\"\" Args: - verbose (bool): Description of arg1. - nets (str): String with the name of selected nets to be filtered (i.e., \"WM,ES\") - stations (str): String with the name of selected stations to be filtered (i.e., \"ARNO,UCM,EMAL\") - channels (str): String with the name of selected channels to be filtered (i.e., \"HHN,HHZ,HHE\") - starttime (str \"%Y-%m-%d %H:%M:%S\" ): String with the reference starttime, upper time spam threshold (i.e.,\"2023-12-10 00:00:00\") - endtime (str \"%Y-%m-%d %H:%M:%S\" ): String with the reference endtime, lower time spam threshold (i.e.,\"2023-12-23 00:00:00\") Returns: - type: Description of the return value. \"\"\" filter_project_keys def filter_project_keys ( self , ** kwargs ): \"\"\" Args: - net (str): String with the name of selected nets to be filtered (i.e., \".\") - station (str): String with the name of selected stations to be filtered (i.e., \"ARNO|UCM|EMAL\") - channel (str): String with the name of selected channels to be filtered (i.e., \"HH.\") \"\"\" filter_project_time def filter_project_time ( self , starttime : str , endtime : str ): \"\"\" - starttime (str, \"%Y-%m-%d %H:%M:%S\"): String with the reference starttime, upper time spam threshold (i.e., \"2023-12-10 00:00:00\") - endtime (str, \"%Y-%m-%d %H:%M:%S\" ): String with the reference endtime, lower time spam threshold (i.e., \"2023-12-23 00:00:00\") \"\"\" save_project def save_project ( self , path_file_to_storage : str ) -> bool # Saves the project object as a pickle file. load_project def load_project ( path_to_project_file : str ): Attibutes project : Dict data_files : List Next, the example of using this class and its methods. This example script is available in SurfQuakeCore/examples/manage_project_new.py from multiprocessing import freeze_support from surfquakecore.project.surf_project import SurfProject import time path_to_data = \"/Volumes/LaCie/test_surfquake_core/testing_data\" path_to_project = \"/Volumes/LaCie/test_surfquake_core/testing_data/projects/surfquake_project_new.pkl\" if __name__ == '__main__' : freeze_support () sp = SurfProject ( path_to_data ) #sp.search_files(starttime=\"2022-01-30 23:55:00\", endtime=\"2022-02-01 00:30:00\", stations=\"SALF,VALC\", channels=\"HHZ\") sp . search_files ( verbose = False ) #sp_original_project = copy.copy() sp . filter_project_keys ( station = \"SALF|VALC|CEST\" ) sp_original1 = sp . copy () sp_original1 . filter_project_keys ( station = \"SALF\" ) sp_original2 = sp . copy () sp_original2 . filter_project_keys ( station = \"VALC\" ) sp_join = sp_original1 + sp_original2 print ( \"With no filter\" ) print ( sp_join ) sp_join . filter_project_time ( starttime = \"2022-01-30 23:55:00\" , endtime = \"2022-02-01 00:30:00\" ) print ( \"With filter\" ) print ( sp_join ) sp_join . save_project ( path_file_to_storage = path_to_project ) time . sleep ( 5 ) sp_loaded = SurfProject . load_project ( path_to_project_file = path_to_project ) print ( sp_loaded ) The first step is create the object from the class SurfProject sp = SurfProject The necessary input to create the sp object is the root path where you have storage the seismogram files. Then, you can proceed to apply the method \"search_files\". This method includes the possibility of filter the inclusion of files inside the project. sp . search_files ( starttime = \"2022-01-30 23:55:00\" , endtime = \"2022-02-01 00:30:00\" , stations = \"SALF,VALC\" , channels = \"HHZ\" ) print ( sp ) # To see the contain of the project Additionally, once the project has been created, you can also filter it by using \u00b4regular expressions\u00b4 net, station, channel using: Note: some util Regex info at Wiki Regex and Python keywords sp . filter_project_keys ( station = \"SALF|VALC|CEST\" ) or filterintg the time spam using: sp_join . ilter_project_time ( starttime = \"2022-01-30 23:55:00\" , endtime = \"2022-02-01 00:30:00\" ) Adding projects using \"+\" symbol sp_original1 = sp . copy () sp_original1 . filter_project_keys ( station = \"SALF\" ) sp_original2 = sp . copy () sp_original2 . filter_project_keys ( station = \"VALC\" ) sp_join = sp_original1 + sp_original2 Finally, you can save the project by, sp_join . save_project ( path_file_to_storage = path_to_project ) and loading it sp_loaded = SurfProject . load_project ( path_to_project_file = path_to_project ) Project from CLI Overview This command allows you to create a seismic project, which is essentially a dictionary storing the paths to seismogram files along with their corresponding metadata. Usage >>surfquake project -d [ path to data files ] -s [ path to save directory ] -n [ project name ] --verbose Interactive help >> surfquake project -h Create Project example from CLI In your termina, activate sufquake enviroment to have access to the commands. Then: >> surfquake project -d /Volumes/LaCie/test_surfquake_core/testing_data -s /Volumes/LaCie/test_surfquake_core/testing_data/projects -n /surfquake_project_new.pkl --verbose","title":"Project"},{"location":"project/#create-your-project","text":"In surfQuake a project is simply a python object that can store in its attributes the path to valid seismogram files plus the associated metadata. This strategy allows to proceed with fast filters or join different projects. Project is the necessary input for the toolboxes Picker, Associator, Event Locator, Seismic Source and MTI. Here we will explain how the user can manage a project and be ready to proceed with the rest of toolboxes.","title":"Create your project"},{"location":"project/#project-gui","text":"We start with the GUI. This is a screenshot of the Project GUI. First, you need to choose between: Search files using Regular Expressions : Click in this button will open a window explorer to select the available files based on the filter edit line. In the example ( .HHZ) and ( EMUR*). Please set to blank space if you do not desire apply filters inside the window explorer. Then just select files and accept. The project will be automatically generated. Project Parth Files : This option is intendeed to let surfQuake search for valid seismogram files from a root folder in ahead. Optionally check Filter Time Spam and/or Filter Keys to include seismograms files that only fullfills the filter. Second: Save Project It is very remmendable to save the project. So, Proceed to give a name to the project and save it pressing Save Project for later using. Third: Load Project This action will open a window explorer so that you can select a project file previously saved and loaded. This will let you go ahead with the following toolboxes such as Picking Phases. Finally: Metadata (https://docs.obspy.org/tutorial/code_snippets/stationxml_file_from_scratch.html): Metadata file with the in there is information structured as a dictionary nets/stations/channels. Personally, the best way to make your own metadata file is using either the java software PDCC or going to the API Station Management Portal .","title":"Project GUI"},{"location":"project/#project-from-library","text":"","title":"Project from library"},{"location":"project/#classes","text":"In this section, we will explain the class SurfProject and we will explain how to manage your project from a simple example: SurfProject class SurfProject : def __init__ ( self , root_path : Union [ str , List [ str ]]): \"\"\" SurfProject class is designed to be able to storage the path to seismograms files plus the file metadata information (i.e. sampling_rate, starttime...) Attributes: - root_path (str): The root path to the folder where the user have the data files. Methods: - __init__(root_path): Initialize a new instance of MyClass. - load_project(path_to_project_file: str): Load a project from a file storage in hard-drive - save_project(path_file_to_storage: str): Saves a project as a pickle file in hard-drive - search_files(verbose=True, **kwargs): Create a project. It can be used filters by nets, stations, channels selection and/or filter by timestamp - filter_project_keys(**kwargs): Filter a project (once is crated) using regular expressions. \"\"\"","title":"Classes"},{"location":"project/#methods","text":"search_files def search_files ( self , format = \"NONE\" , verbose = True , ** kwargs ): \"\"\" Args: - verbose (bool): Description of arg1. - nets (str): String with the name of selected nets to be filtered (i.e., \"WM,ES\") - stations (str): String with the name of selected stations to be filtered (i.e., \"ARNO,UCM,EMAL\") - channels (str): String with the name of selected channels to be filtered (i.e., \"HHN,HHZ,HHE\") - starttime (str \"%Y-%m-%d %H:%M:%S\" ): String with the reference starttime, upper time spam threshold (i.e.,\"2023-12-10 00:00:00\") - endtime (str \"%Y-%m-%d %H:%M:%S\" ): String with the reference endtime, lower time spam threshold (i.e.,\"2023-12-23 00:00:00\") Returns: - type: Description of the return value. \"\"\" filter_project_keys def filter_project_keys ( self , ** kwargs ): \"\"\" Args: - net (str): String with the name of selected nets to be filtered (i.e., \".\") - station (str): String with the name of selected stations to be filtered (i.e., \"ARNO|UCM|EMAL\") - channel (str): String with the name of selected channels to be filtered (i.e., \"HH.\") \"\"\" filter_project_time def filter_project_time ( self , starttime : str , endtime : str ): \"\"\" - starttime (str, \"%Y-%m-%d %H:%M:%S\"): String with the reference starttime, upper time spam threshold (i.e., \"2023-12-10 00:00:00\") - endtime (str, \"%Y-%m-%d %H:%M:%S\" ): String with the reference endtime, lower time spam threshold (i.e., \"2023-12-23 00:00:00\") \"\"\" save_project def save_project ( self , path_file_to_storage : str ) -> bool # Saves the project object as a pickle file. load_project def load_project ( path_to_project_file : str ):","title":"Methods"},{"location":"project/#attibutes","text":"project : Dict data_files : List Next, the example of using this class and its methods. This example script is available in SurfQuakeCore/examples/manage_project_new.py from multiprocessing import freeze_support from surfquakecore.project.surf_project import SurfProject import time path_to_data = \"/Volumes/LaCie/test_surfquake_core/testing_data\" path_to_project = \"/Volumes/LaCie/test_surfquake_core/testing_data/projects/surfquake_project_new.pkl\" if __name__ == '__main__' : freeze_support () sp = SurfProject ( path_to_data ) #sp.search_files(starttime=\"2022-01-30 23:55:00\", endtime=\"2022-02-01 00:30:00\", stations=\"SALF,VALC\", channels=\"HHZ\") sp . search_files ( verbose = False ) #sp_original_project = copy.copy() sp . filter_project_keys ( station = \"SALF|VALC|CEST\" ) sp_original1 = sp . copy () sp_original1 . filter_project_keys ( station = \"SALF\" ) sp_original2 = sp . copy () sp_original2 . filter_project_keys ( station = \"VALC\" ) sp_join = sp_original1 + sp_original2 print ( \"With no filter\" ) print ( sp_join ) sp_join . filter_project_time ( starttime = \"2022-01-30 23:55:00\" , endtime = \"2022-02-01 00:30:00\" ) print ( \"With filter\" ) print ( sp_join ) sp_join . save_project ( path_file_to_storage = path_to_project ) time . sleep ( 5 ) sp_loaded = SurfProject . load_project ( path_to_project_file = path_to_project ) print ( sp_loaded ) The first step is create the object from the class SurfProject sp = SurfProject The necessary input to create the sp object is the root path where you have storage the seismogram files. Then, you can proceed to apply the method \"search_files\". This method includes the possibility of filter the inclusion of files inside the project. sp . search_files ( starttime = \"2022-01-30 23:55:00\" , endtime = \"2022-02-01 00:30:00\" , stations = \"SALF,VALC\" , channels = \"HHZ\" ) print ( sp ) # To see the contain of the project Additionally, once the project has been created, you can also filter it by using \u00b4regular expressions\u00b4 net, station, channel using: Note: some util Regex info at Wiki Regex and Python keywords sp . filter_project_keys ( station = \"SALF|VALC|CEST\" ) or filterintg the time spam using: sp_join . ilter_project_time ( starttime = \"2022-01-30 23:55:00\" , endtime = \"2022-02-01 00:30:00\" ) Adding projects using \"+\" symbol sp_original1 = sp . copy () sp_original1 . filter_project_keys ( station = \"SALF\" ) sp_original2 = sp . copy () sp_original2 . filter_project_keys ( station = \"VALC\" ) sp_join = sp_original1 + sp_original2 Finally, you can save the project by, sp_join . save_project ( path_file_to_storage = path_to_project ) and loading it sp_loaded = SurfProject . load_project ( path_to_project_file = path_to_project )","title":"Attibutes"},{"location":"project/#project-from-cli","text":"","title":"Project from CLI"},{"location":"project/#overview","text":"This command allows you to create a seismic project, which is essentially a dictionary storing the paths to seismogram files along with their corresponding metadata.","title":"Overview"},{"location":"project/#usage","text":">>surfquake project -d [ path to data files ] -s [ path to save directory ] -n [ project name ] --verbose","title":"Usage"},{"location":"project/#interactive-help","text":">> surfquake project -h","title":"Interactive help"},{"location":"project/#create-project-example-from-cli","text":"In your termina, activate sufquake enviroment to have access to the commands. Then: >> surfquake project -d /Volumes/LaCie/test_surfquake_core/testing_data -s /Volumes/LaCie/test_surfquake_core/testing_data/projects -n /surfquake_project_new.pkl --verbose","title":"Create Project example from CLI"},{"location":"template/","text":"MyClass A brief introduction to what MyClass does. Attributes attribute1 : Description of attribute1. attribute2 : Description of attribute2. Methods __init__(self, param1, param2) Description of the constructor method. Parameters param1 : Description of param1. param2 : Description of param2. method1(self, arg1) Description of method1. Parameters arg1 : Description of arg1. Returns Description of what the method returns. method2(self, arg2) Description of method2. Parameters arg2 : Description of arg2. Returns Description of what the method returns. read(pathname_or_url=None, format=None, ...) class method ( self , pathname_or_url = None , ** kwargs ): \"\"\" A method to pick seismic data. :param pathname_or_url: The path or URL of the seismic data. :type pathname_or_url: str, optional :param **kwargs: Additional keyword arguments. :returns: The seismic data. :rtype: :class:`~obspy.core.stream.Stream` \"\"\" # Implementation of the picker method pass","title":"MyClass"},{"location":"template/#myclass","text":"A brief introduction to what MyClass does.","title":"MyClass"},{"location":"template/#attributes","text":"attribute1 : Description of attribute1. attribute2 : Description of attribute2.","title":"Attributes"},{"location":"template/#methods","text":"","title":"Methods"},{"location":"template/#__init__self-param1-param2","text":"Description of the constructor method.","title":"__init__(self, param1, param2)"},{"location":"template/#parameters","text":"param1 : Description of param1. param2 : Description of param2.","title":"Parameters"},{"location":"template/#method1self-arg1","text":"Description of method1.","title":"method1(self, arg1)"},{"location":"template/#parameters_1","text":"arg1 : Description of arg1.","title":"Parameters"},{"location":"template/#returns","text":"Description of what the method returns.","title":"Returns"},{"location":"template/#method2self-arg2","text":"Description of method2.","title":"method2(self, arg2)"},{"location":"template/#parameters_2","text":"arg2 : Description of arg2.","title":"Parameters"},{"location":"template/#returns_1","text":"Description of what the method returns. read(pathname_or_url=None, format=None, ...) class method ( self , pathname_or_url = None , ** kwargs ): \"\"\" A method to pick seismic data. :param pathname_or_url: The path or URL of the seismic data. :type pathname_or_url: str, optional :param **kwargs: Additional keyword arguments. :returns: The seismic data. :rtype: :class:`~obspy.core.stream.Stream` \"\"\" # Implementation of the picker method pass","title":"Returns"}]}