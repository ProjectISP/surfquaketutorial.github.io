{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to surfQuake","text":"<p>surfQuake is a new software designed to overcome the workflow process that involves the estimation of seismic source parameters. </p> <p>The complete set of toolboxes inside surfQuake allows the user the complete automation of seismic phases arrival times estimation and events association, event locations, magnitudes and attenuation, slowness vector, and moment tensor inversion. The software is programmed in Python 3 and offers the users the possibility of three programming levels. </p> <p>From the core library, which allows the user to integrate the core of surfQuake into his own scripts, to the Command Line Interface, which gives the user access to an upper layer that simplifies the use of the core. Finally, surfQuake core is wrapped by a Graphical User Interface (GUI) and connected to a SQL Lite database to store all the results. The user has direct access to query the database tables to extract important information through the object Relational Mapper SqlAlchemy directly managed from the GUI.</p> <p>surfQuakeCore &amp;&amp; surfQuakeGUI</p> <p>Follow us in: twitter.</p> <p>Reference Paper:</p> <p>Roberto Cabieces, Andr\u00e9s Olivar\u2010Casta\u00f1o, Thiago C. Junqueira, Jes\u00fas Relinque, Luis Fernandez\u2010Prieto, Ji\u0159\u00ed Vack\u00e1r, Boris R\u00f6sler, Jaime Barco, Antonio Pazos, Luz Garc\u00eda\u2010Mart\u00ednez; Integrated Seismic Program (ISP): A New Python GUI\u2010Based Software for Earthquake Seismology and Seismic Signal Processing. Seismological Research Letters 2022;; 93 (3): 1895\u20131908. doi: https://doi.org/10.1785/0220210205</p>"},{"location":"#how-to-read-this-tutorial","title":"How to read this Tutorial","text":"<p>The first step is to select which programming level is the cmost convenient for you. We offer three levels a Graphical User Interface (user friendly), Command Line Interface (for advanced users that likes black boxes with no complicationt) and core library ( for expert users that wants integrate surfQuake in their own scripts).</p> <p>Ok, now that you have an idea.surfQuake is divided in five parts Picking, Association, Locate, Source and MTI. For each toolbox you will find your a description of the software according to your programming level and a usage example!</p> <p>Let's start with Project and then continue.</p>"},{"location":"#index-toolboxes","title":"Index: ToolBoxes","text":"<ul> <li>Create your Project </li> <li>Phase Picker </li> </ul>"},{"location":"picker/","title":"Phase Picker","text":"<p>The Picking algorythm of surfQuake uses the Deep Neural Network of Phasenet (Liu et al., 2019) to estimate the arrival times of P- and S-wave. The arrival times are saved as a csv file and in daily folders to be ready to be used by the associator. Example of csv header:</p> <pre><code>date,fname,year,month,day,net,station,flag,tt,date_time,weight,amplitude,phase\n20220131,CA.ARBS.P,2022,1,31,CA,ARBS,1,39383.88,2022-01-31T10:56:23.880000,0.5383206605911255,8557892.700195312,P\n20220131,CA.ARBS.S,2022,1,31,CA,ARBS,1,85480.59,2022-01-31T23:44:40.590000,0.30124416947364807,8481788.269042969,S\n</code></pre>"},{"location":"picker/#phase-picker-gui","title":"Phase Picker GUI","text":"<p>We start with the GUI. This is a screenshot of the Project GUI.</p> <p></p> <p>Be sure you have just created a Project or you have loaded one. Then click on Run Auto Pick. This action will start the phase picker and will save the output in surfquake/data/picks ready to be used in the associator toolbox and surfquake/data/original_picks as csv file for direct reading.</p>"},{"location":"picker/#phase-picker-from-cli","title":"Phase picker from CLI","text":""},{"location":"picker/#overview","title":"Overview","text":"<p>The Picking algorythm uses the Deep Neural Network of Phasenet to estimate the arrival times of P- and S-wave</p>"},{"location":"picker/#usage","title":"Usage","text":"<pre><code>&gt;&gt; surfquake pick -f [path to your project file] -d [path to your pick saving directory] -p [P-wave threshoold] -s [S-wave threshold] --verbose\"\n</code></pre>"},{"location":"picker/#interactive-help","title":"Interactive help","text":"<pre><code>&gt;&gt; surfquake pick -h\n</code></pre>"},{"location":"picker/#run-phase-picker-from-cli","title":"Run Phase Picker from CLI","text":"<pre><code>&gt;&gt; surfquake pick -f /Volumes/LaCie/test_surfquake_core/testing_data/projectssurfquake_project_new.pkl -d /Volumes/LaCie/test_surfquake_core/testing_data/picks -p 0.3 -s 0.3 --verbose\n</code></pre>"},{"location":"picker/#phase-picker-from-library","title":"Phase Picker from Library","text":""},{"location":"picker/#classes","title":"Classes","text":"<p><code>PhasenetISP</code></p> <pre><code>class PhasenetISP:\n    def __init__(files, batch_size=3, highpass_filter=0.5, min_p_prob=0.3, min_s_prob=0.3, min_peak_distance=50, amplitude=False):\n\n    \"\"\"\n\n    Main class to initialize the picker\n\n    :param files: Dictionary with kewords addressing to seismograms file path and their corresponding metadata (i.e. sampling rate).\n    :type SurfProject: required (see Project section)\n\n    :param batch_size: Determines the number of samples in each batch (larger batch size uses more memory but can provide more accurate updates)\n    :type float:\n\n    :param highpass_filter: Lower corner frequency of highpass filter to be applied to the raw seismogram. Set to 0 to do not apply any pre-filter\n    :type float:\n\n    :param min_p_prob: Probability threshold for P pick\n    :type float:\n\n    :param min_s_prob: Probability threshold for S pick\n    :type float:\n\n    :param min_peak_distance: Minimum peak distance\n    :type float:\n\n    :param amplitude: if return amplitude value\n    :type float:\n\n    :returns:\n    :rtype: :class:`surfquakecore.phasenet.phasenet_handler.PhasenetISP`\n\n    \"\"\"\n</code></pre> <p><code>PhasenetUtils</code></p>"},{"location":"picker/#methods","title":"Methods","text":"<p><code>phasenet</code></p> <pre><code># instance method\ndef phasenet(self):\n</code></pre> <p><code>PhasenetUtils.split_picks</code></p> <pre><code>@staticmethod\ndef split_picks(picks):\n    \"\"\"\n    :param picks: A DataFrame with all pick information\n    :type picks: Pandas DataFrame\n    \"\"\"\n</code></pre> <p><code>PhasenetUtils.convert2real</code></p> <pre><code>@staticmethod\ndef convert2real(picks, pick_dir: str):\n\"\"\"\n:param picks: picks is output from method split_picks in mseedutils\n:param pick_dir: directory outpur where phases are storaged\n:return:\n\"\"\"\n</code></pre> <p><code>PhasenetUtils.split_picks</code> <pre><code>@staticmethod\ndef save_original_picks(original_picks, original_p_dir):\n    \"\"\"\n\n    :param original_picks: picking output from phasenet (method split_picks in mseedutils)\n    :param original_p_dir: output to storage original_picks\n    :return:\n    \"\"\"\n</code></pre></p>"},{"location":"picker/#example-using-library","title":"example using library","text":"<pre><code>import os\nfrom multiprocessing import freeze_support\nfrom surfquakecore.phasenet.phasenet_handler import PhasenetUtils\nfrom surfquakecore.phasenet.phasenet_handler import PhasenetISP\nfrom surfquakecore.project.surf_project import SurfProject\n\n### Set Paths to project file and output folder ###\npath_to_project = \"/Volumes/LaCie/test_surfquake_core/project/surfquake_project.pkl\"\noutput_picks = '/Volumes/LaCie/test_surfquake_core/test_picking'\n\nif __name__ == '__main__':\n    freeze_support()\n\n    # Load project\n    sp_loaded = SurfProject.load_project(path_to_project_file=path_to_project)\n\n    # Instantiate the class PhasenetISP\n    phISP = PhasenetISP(sp_loaded.project, amplitude=True, min_p_prob=0.90, min_s_prob=0.65)\n\n    # Running Stage\n    picks = phISP.phasenet()\n\n    \"\"\" PHASENET OUTPUT TO REAL INPUT \"\"\"\n\n    picks_results = PhasenetUtils.split_picks(picks)\n    PhasenetUtils.convert2real(picks_results, output_picks)\n    PhasenetUtils.save_original_picks(picks_results, output_picks)\n</code></pre>"},{"location":"project/","title":"Create your project","text":"<p>In surfQuake a project is simply a python object that can store in its attributes the path to valid seismogram files plus the associated metadata. This strategy allows to proceed with fast filters or join different projects. Project is the necessary input for the toolboxes Picker, Associator, Event Locator, Seismic Source and MTI.</p> <p>Here we will explain how the user can manage a project and be ready to proceed with the rest of toolboxes.</p>"},{"location":"project/#project-gui","title":"Project GUI","text":"<p>We start with the GUI. This is a screenshot of the Project GUI.</p> <p></p> <p>First, you need to choose between: </p> <ul> <li>Search files using Regular Expressions: Click in this button will open a window explorer to select the available files based on the filter edit line. In the example (.HHZ) and (EMUR*). Please set to blank space if you do not desire apply filters inside the window explorer. Then just select files and accept. The project will be automatically generated. </li> <li>Project Parth Files: This option is intendeed to let surfQuake search for valid seismogram files from a root folder in ahead. Optionally check Filter Time Spam and/or Filter Keys to include seismograms files that only fullfills the filter.</li> </ul> <p>Second:</p> <ul> <li>Save Project It is very remmendable to save the project. So, Proceed to give a name to the project and save it pressing Save Project for later using.</li> </ul> <p>Third:</p> <ul> <li>Load Project This action will open a window explorer so that you can select a project file previously saved and loaded. This will let you go ahead with the following toolboxes such as Picking Phases.</li> </ul> <p>Finally:</p> <ul> <li>Metadata (https://docs.obspy.org/tutorial/code_snippets/stationxml_file_from_scratch.html): Metadata file with the in there is information structured as a dictionary nets/stations/channels. Personally, the best way to make your own metadata file is using either the java software PDCC or going to the API Station Management Portal.</li> </ul> <p></p>"},{"location":"project/#project-from-cli","title":"Project from CLI","text":""},{"location":"project/#overview","title":"Overview","text":"<p>This command allows you to create a seismic project, which is essentially a dictionary storing the paths to seismogram files along with their corresponding metadata.</p>"},{"location":"project/#usage","title":"Usage","text":"<pre><code>&gt;&gt;surfquake project -d [path to data files] -s [path to save directory] -n [project name] --verbose\n</code></pre>"},{"location":"project/#interactive-help","title":"Interactive help","text":"<pre><code>&gt;&gt; surfquake project -h\n</code></pre>"},{"location":"project/#create-project-example-from-cli","title":"Create Project example from CLI","text":"<p>In your termina, activate sufquake enviroment to have access to the commands. Then:</p> <pre><code>&gt;&gt; surfquake project -d /Volumes/LaCie/test_surfquake_core/testing_data -s /Volumes/LaCie/test_surfquake_core/testing_data/projects -n /surfquake_project_new.pkl --verbose\n</code></pre>"},{"location":"project/#project-from-library","title":"Project from library","text":""},{"location":"project/#classes","title":"Classes","text":"<p>In this section, we will explain the class SurfProject and we will explain how to manage your project from a simple example:</p> <p><code>SurfProject</code></p> <pre><code>class SurfProject:\n\n    def __init__(self, root_path: Union[str, List[str]]):\n\n        \"\"\"\n\n        SurfProject class is designed to be able to storage the path to seismograms\n        files plus the file metadata information (i.e. sampling_rate, starttime...)\n\n        Attributes:\n        - root_path (str): The root path to the folder where the user have the data files.\n\n        Methods:\n        - __init__(root_path): Initialize a new instance of MyClass.\n        - load_project(path_to_project_file: str): Load a project from a file storage in hard-drive\n        - save_project(path_file_to_storage: str): Saves a project as a pickle file in hard-drive\n        - search_files(verbose=True, **kwargs): Create a project. It can be used filters by nets,\n        stations, channels selection and/or filter by timestamp\n        - filter_project_keys(**kwargs): Filter a project (once is crated) using regular expressions.\n        \"\"\"\n</code></pre>"},{"location":"project/#methods","title":"Methods","text":"<p><code>search_files</code></p> <pre><code>    def search_files(self, format=\"NONE\", verbose=True, **kwargs):\n\n        \"\"\"\n        Args:\n\n        - verbose (bool): Description of arg1.\n        - nets (str): String with the name of selected nets to be filtered (i.e., \"WM,ES\")\n        - stations (str): String with the name of selected stations to be filtered (i.e., \"ARNO,UCM,EMAL\")\n        - channels (str): String with the name of selected channels to be filtered (i.e., \"HHN,HHZ,HHE\")\n        - starttime (str \"%Y-%m-%d %H:%M:%S\" ): String with the reference starttime, upper time spam threshold\n        (i.e.,\"2023-12-10 00:00:00\")\n        - endtime (str \"%Y-%m-%d %H:%M:%S\" ): String with the reference endtime, lower time spam threshold\n        (i.e.,\"2023-12-23 00:00:00\")\n\n        Returns:\n        - type: Description of the return value.\n        \"\"\"\n</code></pre> <p><code>filter_project_keys</code></p> <pre><code>    def filter_project_keys(self, **kwargs):\n\n        \"\"\"\n        Args:\n        - net (str): String with the name of selected nets to be filtered (i.e., \".\")\n        - station (str): String with the name of selected stations to be filtered (i.e., \"ARNO|UCM|EMAL\")\n        - channel (str): String with the name of selected channels to be filtered (i.e., \"HH.\")\n        \"\"\"\n</code></pre> <p><code>filter_project_time</code></p> <pre><code>    def filter_project_time(self, starttime: str, endtime: str):\n\n        \"\"\"\n        - starttime (str, \"%Y-%m-%d %H:%M:%S\"): String with the reference starttime, upper time spam threshold\n        (i.e., \"2023-12-10 00:00:00\")\n\n        - endtime (str, \"%Y-%m-%d %H:%M:%S\" ): String with the reference endtime, lower time spam threshold\n        (i.e., \"2023-12-23 00:00:00\")\n\n        \"\"\"\n</code></pre> <p><code>save_project</code></p> <pre><code>def save_project(self, path_file_to_storage: str)-&gt;bool\n# Saves the project object as a pickle file.\n</code></pre> <p><code>load_project</code></p> <pre><code>def load_project(path_to_project_file: str):\n</code></pre>"},{"location":"project/#attibutes","title":"Attibutes","text":"<pre><code>project :Dict\ndata_files :List\n</code></pre> <p>Next, the example of using this class and its methods. This example script is available in SurfQuakeCore/examples/manage_project_new.py</p> <pre><code>from multiprocessing import freeze_support\nfrom surfquakecore.project.surf_project import SurfProject\nimport time\n\npath_to_data = \"/Volumes/LaCie/test_surfquake_core/testing_data\"\npath_to_project = \"/Volumes/LaCie/test_surfquake_core/testing_data/projects/surfquake_project_new.pkl\"\n\nif __name__ == '__main__':\n\n    freeze_support()\n    sp = SurfProject(path_to_data)\n    #sp.search_files(starttime=\"2022-01-30 23:55:00\", endtime=\"2022-02-01 00:30:00\", stations=\"SALF,VALC\", channels=\"HHZ\")\n    sp.search_files(verbose=False)\n    #sp_original_project = copy.copy()\n    sp.filter_project_keys(station=\"SALF|VALC|CEST\")\n    sp_original1 = sp.copy()\n    sp_original1.filter_project_keys(station=\"SALF\")\n    sp_original2 = sp.copy()\n    sp_original2.filter_project_keys(station=\"VALC\")\n\n    sp_join = sp_original1 + sp_original2\n    print(\"With no filter\")\n    print(sp_join)\n    sp_join.filter_project_time(starttime=\"2022-01-30 23:55:00\", endtime=\"2022-02-01 00:30:00\")\n    print(\"With filter\")\n    print(sp_join)\n    sp_join.save_project(path_file_to_storage=path_to_project)\n    time.sleep(5)\n    sp_loaded = SurfProject.load_project(path_to_project_file=path_to_project)\n    print(sp_loaded)\n</code></pre> <p>The first step is create the object from the class SurfProject </p> <pre><code>sp = SurfProject\n</code></pre> <p>The necessary input to create the sp object is the root path where you have storage the seismogram files. Then, you can proceed to apply the method \"search_files\". This method includes the possibility of filter the inclusion of files inside the project.</p> <pre><code>sp.search_files(starttime=\"2022-01-30 23:55:00\", endtime=\"2022-02-01 00:30:00\", stations=\"SALF,VALC\", channels=\"HHZ\")\nprint(sp) # To see the contain of the project\n</code></pre> <p>Additionally, once the project has been created, you can also filter it by using \u00b4regular expressions\u00b4 net, station, channel using:</p> <p>Note: some util Regex info at Wiki Regex and Python keywords <pre><code>sp.filter_project_keys(station=\"SALF|VALC|CEST\")\n</code></pre></p> <p>or filterintg the time spam using:</p> <pre><code>sp_join.ilter_project_time(starttime=\"2022-01-30 23:55:00\", endtime=\"2022-02-01 00:30:00\")\n</code></pre> <p>Adding projects using \"+\" symbol</p> <pre><code>sp_original1 = sp.copy()\nsp_original1.filter_project_keys(station=\"SALF\")\nsp_original2 = sp.copy()\nsp_original2.filter_project_keys(station=\"VALC\")\n\nsp_join = sp_original1 + sp_original2\n</code></pre> <p>Finally, you can save the project by, <pre><code>sp_join.save_project(path_file_to_storage=path_to_project)\n</code></pre> and loading it</p> <pre><code>sp_loaded = SurfProject.load_project(path_to_project_file=path_to_project)\n</code></pre>"}]}